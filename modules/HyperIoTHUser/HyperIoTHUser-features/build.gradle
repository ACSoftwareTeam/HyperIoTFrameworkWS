apply plugin: 'com.github.lburgazzoli.karaf'

jar.enabled = false

version = '1.0.0'
configurations {
	hUser {
		transitive = false
	}

	hUserRest {
		transitive = false
	}
}

dependencies {
    hUser 'it.acsoftware.hyperiot.role:HyperIoTRole-model:'+project.hyperIoTVersion
    hUser 'it.acsoftware.hyperiot.huser:HyperIoTHUser-actions:'+project.hyperIoTVersion
    hUser 'it.acsoftware.hyperiot.huser:HyperIoTHUser-model:'+project.hyperIoTVersion
    hUser 'it.acsoftware.hyperiot.huser:HyperIoTHUser-api:'+project.hyperIoTVersion
    hUser 'it.acsoftware.hyperiot.huser:HyperIoTHUser-command:'+project.hyperIoTVersion
    hUser 'it.acsoftware.hyperiot.huser:HyperIoTHUser-repository:'+project.hyperIoTVersion
    hUser 'it.acsoftware.hyperiot.huser:HyperIoTHUser-service:'+project.hyperIoTVersion
    hUserRest 'it.acsoftware.hyperiot.huser:HyperIoTHUser-service-rest:'+project.hyperIoTVersion
}


karaf {
    features {
        // See section below for karaf 4 support if using 1.3.0
        xsdVersion  = '1.2.0'
        version     = '4.0.0' // Your project version
        description = 'Karaf features'

        // Include the current project, false by default
        includeProject = false

        // Add in extra repositories to the features xml file

        feature {
            name        = 'hyperiot-huser'
            description = 'All Hyperiot HyperIoTHUser Modules'
			feature 'hyperiot-base'
            configurations 'hUser','hUserRest'
        }

        feature {
            name        = 'hyperiot-huser-basic'
            description = 'All Hyperiot HyperIoTHUser Modules with NO rest services '
			feature 'hyperiot-base-basic'
            configurations 'hUser'
        }
    }

    // Enable generation of Karaf Archive KAR based on features defined above.
    // To generate kar either use generateKar, assemble or install
    kar {
        // Optionally set the kar name, default is:
        //
        //     ${features.name}-${features.version}.kar
        //
        // Extension is automatically set to .kar
        archiveName = 'HyperIoTHUser'
    }
}


task buildHIT(type: GradleBuild) {

}

task buildFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install' ]
}

task publishHIT(type: GradleBuild) {

}

task publishFeatures(type: GradleBuild) {
	tasks = [ 'clean','generateFeatures','build','install','publish' ]
}

def featureFile = 'build/karaf/features/'+project.name+'-'+project.version+'.xml'
publishing {
    publications {
        hyperiot(MavenPublication) {
            artifactId project.name
            artifact source: featureFile, classifier: 'features'
        }
    }
 }
