package it.acsoftware.hyperiot.mail.repository;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Enumeration;
import java.util.logging.Level;

import javax.persistence.NoResultException;

import org.apache.aries.jpa.template.JpaTemplate;
import org.apache.aries.jpa.template.TransactionType;
import org.osgi.framework.Bundle;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

import it.acsoftware.hyperiot.base.repository.HyperIoTBaseRepositoryImpl;
import it.acsoftware.hyperiot.base.util.HyperIoTUtil;
import it.acsoftware.hyperiot.mail.api.MailRepository;
import it.acsoftware.hyperiot.mail.model.MailTemplate;

/**
 * 
 * @author Aristide Cittadino Implementation class of the Mail. This class is
 *         used to interact with the persistence layer.
 *
 */
@Component(service = MailRepository.class, immediate = true)
public class MailRepositoryImpl extends HyperIoTBaseRepositoryImpl<MailTemplate>
		implements MailRepository {
	/**
	 * Injecting the JpaTemplate to interact with database
	 */
	private JpaTemplate jpa;

	/**
	 * Constructor for a MailRepositoryImpl
	 */
	public MailRepositoryImpl() {
		super(MailTemplate.class);
	}

	/**
	 * 
	 * @return The current jpaTemplate
	 */
	@Override
	protected JpaTemplate getJpa() {
		log.log(Level.FINEST, "invoking getJpa, returning: {0}" , jpa);
		return jpa;
	}

	/**
	 * @param jpa Injection of JpaTemplate
	 */
	@Override
	@Reference(target = "(osgi.unit.name=hyperiot-mail-persistence-unit)")
	protected void setJpa(JpaTemplate jpa) {
		log.log(Level.FINEST, "invoking setJpa, setting: {0}" , jpa);
		this.jpa = jpa;
	}

	@Override
	public MailTemplate findByName(String name) {
		log.log(Level.FINE, "Repository findByName " + name);
		return this.getJpa().txExpr(TransactionType.Required, entityManager -> {
			log.log(Level.FINE, "Transaction found, invoke findByUsername");
			MailTemplate template = entityManager
					.createQuery("from MailTemplate mt where mt.name=:name ", MailTemplate.class)
					.setParameter("name", name).getSingleResult();
			log.log(Level.FINE, "Query results: {0}" , template);
			return template;
		});
	}

	@Activate
	public void createDefaultTemplates() {
		try {
			Bundle mailTemplateServiceBundle = HyperIoTUtil.getBundleContext(this.getClass())
					.getBundle("mvn:it.acsoftware.hyperiot.mail/HyperIoTMail-service/1.0.0");
			Enumeration<URL> staticTemplates = mailTemplateServiceBundle.findEntries("templates",
					"*.ftl", true);
			while (staticTemplates.hasMoreElements()) {
				URL templatePath = staticTemplates.nextElement();
				int indexOfFileName = templatePath.getPath().lastIndexOf('/');
				if (indexOfFileName > 0) {
					String name = templatePath.getPath().substring(indexOfFileName + 1);
					try {
						this.findByName(name);
					} catch (NoResultException e) {
						log.log(Level.WARNING, "Creating custom mail template from name: {0}" , name);
						MailTemplate mt = new MailTemplate();
						InputStream is = templatePath.openStream();
						BufferedReader br = new BufferedReader(new InputStreamReader(is));
						StringBuilder content = new StringBuilder();
						String line = br.readLine();
						while (line != null) {
							content.append(line);
							line = br.readLine();
						}
						mt.setDescription("Static mail template autogenerated!");
						mt.setName(name);
						mt.setContent(content.toString());
						this.save(mt);

					}
				}

			}
		} catch (IOException e) {
			log.log(Level.SEVERE, e.getMessage(), e);
		}
	}
}
